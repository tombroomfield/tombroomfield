<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://tombroomfield.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://tombroomfield.com/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-11-05T08:11:16+00:00</updated><id>https://tombroomfield.com/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Introducing CanIKit - Don’t forget to authorize!</title><link href="https://tombroomfield.com/blog/2023/introducing-canikit/" rel="alternate" type="text/html" title="Introducing CanIKit - Don’t forget to authorize!"/><published>2023-09-13T22:25:18+00:00</published><updated>2023-09-13T22:25:18+00:00</updated><id>https://tombroomfield.com/blog/2023/introducing-canikit</id><content type="html" xml:base="https://tombroomfield.com/blog/2023/introducing-canikit/"><![CDATA[<p>It’s conventional wisdom as old as time itself.</p> <p>Do. not. roll. your. own. auth(<strong>enitcation</strong>).</p> <p>And as a developer community, we’ve done a pretty good job of following that advice. We’ve got a plethora of authentication libraries, and frameworks that make it easy to add authentication to our applications.</p> <p>But what about <em>authorization?</em> Some frameworks have community endorsed authorization libraries that do a great job of adding authorization to our applications. Rails has <strong><a href="https://github.com/varvet/pundit">Pundit</a></strong>, Go has <strong><a href="https://github.com/casbin/casbin">casbin</a></strong>, <strong>ASP.NET</strong> has it built directly into the framework.</p> <p>But what about <strong>SvelteKit?</strong> Currently, SvelteKit developers are left to roll their own authorization solutions as part of their routing logic. Authorization logic is typically mixed in with the server-side route logic.</p> <p>This has a few major drawbacks:</p> <ul> <li> <p>The Authorization logic is much harder to reason about.</p> </li> <li> <p>The Authorization logic is much harder to test.</p> </li> <li> <p>It is much, much easier to forget to add authorization logic all together.</p> </li> </ul> <p>Given this, what should we look for in an authorization library?</p> <ul> <li> <p>Authorization logic should be isolated from everything else. This will make it easy to find, easy to reason about, and easy to test.</p> </li> <li> <p>Authorization logic should be enforced. If authorization logic is not called, an error should be thrown. Force the developer to think about authorization at all times. Don’t rely solely on code reviews to catch missing authorization logic!</p> </li> </ul> <h2 id="introducing-canikit">Introducing CanIKit</h2> <p>CanIKit is a SvelteKit library that provides a simple way to add authorization to your SvelteKit application. It is heavily inspired by <strong><a href="https://github.com/varvet/pundit">Pundit</a></strong></p> <p>Every single +page.server, +layout.server, or +server file in your SvelteKit app will now require a corresponding +policy file. The policy file is responsible for answering the question</p> <blockquote> <p>Can I (the current user) do this (action) on this (resource)?</p> </blockquote> <p>A simple policy file might look like this:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// routes/dashboard/page.policy.ts</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">CanIKitPolicy</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">canikit</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nc">Policy</span> <span class="kd">extends</span> <span class="nc">CanIKitPolicy</span> <span class="p">{</span>
  <span class="k">public</span> <span class="nf">view</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">user</span><span class="p">?.</span><span class="nx">role</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">admin</span><span class="dl">"</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>This policy file will be used by the corresponding page.server file:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// routes/dashboard/+page.server.ts</span>

<span class="k">export</span> <span class="k">async</span> <span class="kd">function</span> <span class="nf">get</span><span class="p">({</span> <span class="nx">session</span><span class="p">,</span> <span class="na">locals</span><span class="p">:</span> <span class="p">{</span> <span class="nx">canI</span> <span class="p">}</span> <span class="p">})</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">...</span> <span class="c1">// get the user from the session</span>
    <span class="k">await</span> <span class="nf">canI</span><span class="p">({</span> <span class="nx">user</span> <span class="p">})</span> <span class="c1">// Check to see if the user can view the dashboard</span>
<span class="p">}</span>
</code></pre></div></div> <p>If the developer forgets to call <code class="language-plaintext highlighter-rouge">canI</code> in the page.server file, an error will be thrown:</p> <p>You can read more about CanIKit on the <strong><a href="https://github.com/tombroomfield/CanIKit">GitHub repo</a></strong>.</p> <p>Happy Authorizing!</p>]]></content><author><name></name></author><category term="open-source"/><category term="authorization,"/><category term="sveltekit"/><summary type="html"><![CDATA[The missing authorization library for SvelteKit!]]></summary></entry></feed>